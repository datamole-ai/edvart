[changelog]
# changelog header
header = """
# Changelog
"""

body = """
{% if version %}\
    ## {{ version }}
{% else %}\
    ## [unreleased]
{% endif %}\


{% set has_breaking = commits | filter(attribute="breaking", value=true) | length -%}
{%- if has_breaking -%}
     ### BREAKING CHANGES
     All breaking changes are listed here but also kept in their respective sections.
     {% for commit in commits | filter(attribute="breaking", value=true)  -%}
            - *{{commit.group}}*: {{ commit.message | upper_first }}  {% raw %}\n{% endraw -%}
                {% if commit.message != commit.breaking_description -%}
                **{{ commit.breaking_description | upper_first }}**
                {%- endif -%}
    {% raw %}\n{% endraw -%}\
    {%- endfor -%}
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
        | filter(attribute="scope")
        | sort(attribute="scope") %}
            - *({{commit.scope}})*{% if commit.breaking %} [**BREAKING CHANGE**]{% endif %} \
                {{ commit.message | upper_first }}
    {%- endfor -%}
    {% raw %}\n{% endraw -%}\
    {%- for commit in commits -%}
        {%- if commit.scope -%}
        {% else -%}
            - {% if commit.breaking %} [**BREAKING CHANGE**]{% endif %} \
                {{ commit.message | upper_first }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true

# filter out the commits that are not conventional
filter_unconventional = true

# process each line of a commit as an individual commit
split_commits = false

# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->⛰️ Features" },
    { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^refactor", group = "<!-- 2 -->🛠️ Refactor" },
    { message = "^docs", group = "<!-- 3 -->📚 Documentation" },
    { message = "^test", group = "<!-- 4 -->🧪 Testing" },
    { message = "^ci", group = "<!-- 5 -->🏗 Build & CI/CD" },
    { message = "^build", group = "<!-- 6 -->🏗️ Build & CI/CD" },
    { message = "^chore", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
]

# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false

# filter out the commits that are not matched by commit parsers
filter_commits = true

# glob pattern for matching git tags
tag_pattern = "v[0-9]*"

# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
